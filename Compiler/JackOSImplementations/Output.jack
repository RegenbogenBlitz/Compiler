/**
 * Handles writing characters to the screen.
 * The text screen (256 columns and 512 roes) is divided into 23 text rows (0..22), 
 * each containing 64 text columns (0..63).
 * Each row is 11 pixels high (including 1 space pixel), and 8 pixels wide
 * (including 2 space pixels).
 */
class Output {

    // Character map for printing on the left of a screen word
    static Array charMaps; 
    static Array twoToThe; 
    static int charX; 
    static int charY;
    
    /** Initializes the screen and locates the cursor at the screen's top-left. */
    function void init()
    {
        do Output.initTwoToThe();
        do Output.initMap();
        
        return;
    }

    function void initTwoToThe()
    {
        var int i;
        var int val;
        
        let twoToThe = Array.new(15);
        let i = 0;
        let val = 1;
        while(i<15)
        {
            let twoToThe[i] = val;
            let i = i + 1;
            let val = val * 2;
        }
        
        return;
    }
    
    // Initalizes the character map array
    function void initMap()
    {
        var int i;
    
        let charMaps = Array.new(127);
        
        // black square (used for non printable characters)
        do Output.create(0,63,63,63,63,63,63,63,63,63,0,0);

        // Assigns the bitmap for each character in the charachter set.
        do Output.create(32,0,0,0,0,0,0,0,0,0,0,0);           //
        do Output.create(33,62,62,28,28,28,0,28,28,0,0,0);    // !
        do Output.create(34,54,54,20,0,0,0,0,0,0,0,1);        // "
        do Output.create(35,38,38,127,38,38,63,38,38,0,0,0);  // #
        do Output.create(36,12,30,51,3,30,48,51,30,12,12,1);  // $
        do Output.create(37,71,101,51,24,12,102,83,113,0,0,0);// %
        do Output.create(38,12,18,12,14,83,35,51,94,12,0,0);  // &
        do Output.create(39,12,12,6,0,0,0,0,0,0,0,1);         // '
        do Output.create(40,24,12,6,6,6,6,6,12,24,0,1);       // (
        do Output.create(41,6,12,24,24,24,24,24,12,6,0,1);    // )
        do Output.create(42,0,0,0,51,30,63,30,51,0,0,1);      // *
        do Output.create(43,0,0,0,12,12,63,12,12,0,0,1);      // +
        do Output.create(44,0,0,0,0,0,0,0,12,12,6,1);         // ,
        do Output.create(45,0,0,0,0,0,63,0,0,0,0,1);          // -
        do Output.create(46,0,0,0,0,0,0,0,12,12,0,1);         // .    
        do Output.create(47,0,0,32,48,24,12,6,3,1,0,1);       // /
        
        do Output.create(48,62,67,69,73,73,81,97,62,0,0,0);  // 0
        do Output.create(49,12,14,15,12,12,12,12,12,63,0,1); // 1
        do Output.create(50,30,51,48,24,12,6,3,51,63,0,1);   // 2
        do Output.create(51,30,51,48,48,28,48,48,51,30,0,1); // 3
        do Output.create(52,16,24,28,26,25,63,24,24,60,0,1); // 4
        do Output.create(53,63,3,3,31,48,48,48,51,30,0,1);   // 5
        do Output.create(54,28,6,3,3,31,51,51,51,30,0,1);    // 6
        do Output.create(55,63,49,48,48,24,12,12,12,12,0,1); // 7
        do Output.create(56,30,51,51,51,30,51,51,51,30,0,1); // 8
        do Output.create(57,30,51,51,51,62,48,48,24,14,0,1); // 9
        
        do Output.create(58,0,0,12,12,0,0,12,12,0,0,1);      // :
        do Output.create(59,0,0,12,12,0,0,12,12,6,0,1);      // ;
        do Output.create(60,0,0,24,12,6,3,6,12,24,0,1);      // <
        do Output.create(61,0,0,0,63,0,0,63,0,0,0,1);        // =
        do Output.create(62,0,0,3,6,12,24,12,6,3,0,1);       // >
        do Output.create(64,0,62,65,93,85,125,1,62,0,0,0);   // @
        do Output.create(63,62,65,32,28,28,0,28,28,0,0,0);   // ?

        do Output.create(65,126,67,67,127,67,67,67,67,0,0,0); // A
        do Output.create(66,31,35,35,63,67,67,67,127,0,0,0);  // B
        do Output.create(67,126,3,3,3,3,3,3,126,0,0,0);       // C
        do Output.create(68,63,67,67,67,67,67,67,63,0,0,0);   // D
        do Output.create(69,127,3,3,127,3,3,3,127,0,0,0);     // E
        do Output.create(70,127,3,3,63,3,3,3,3,0,0,0);        // F
        do Output.create(71,126,3,3,115,67,67,67,126,0,0,0);  // G
        do Output.create(72,67,67,67,127,67,67,67,67,0,0,0);  // H
        do Output.create(73,127,12,12,12,12,12,12,127,0,0,0); // I
        do Output.create(74,127,24,24,24,24,24,24,15,0,0,0);  // J
        do Output.create(75,99,51,27,15,15,27,51,99,0,0,0);   // K
        do Output.create(76,3,3,3,3,3,3,3,127,0,0,0);         // L
        do Output.create(77,65,99,119,127,91,67,67,67,0,0,0); // M
        do Output.create(78,67,71,79,91,115,99,67,67,0,0,0);  // N
        do Output.create(79,62,99,99,99,99,99,99,62,0,0,0);   // O
        do Output.create(80,62,67,67,63,3,3,3,3,0,0,0);       // P
        do Output.create(81,62,99,99,99,99,99,99,62,96,0,0);  // Q
        do Output.create(82,62,67,67,127,35,67,67,67,0,0,0);  // R
        do Output.create(83,62,71,7,62,96,96,97,62,0,0,0);    // S
        do Output.create(84,127,24,24,24,24,24,24,24,0,0,0);  // T
        do Output.create(85,67,67,67,67,67,67,127,60,0,0,0);  // U
        do Output.create(86,67,67,67,67,103,62,28,8,0,0,0);   // V
        do Output.create(87,67,67,67,83,127,126,44,44,0,0,0); // W
        do Output.create(88,65,99,54,28,54,99,65,65,0,0,0);   // X
        do Output.create(89,67,67,103,126,48,24,14,3,0,0,0);  // Y
        do Output.create(90,127,96,48,24,12,6,3,127,0,0,0);   // Z

        do Output.create(91,30,6,6,6,6,6,6,6,30,0,1);          // [
        do Output.create(92,0,0,1,3,6,12,24,48,32,0,1);        // \
        do Output.create(93,30,24,24,24,24,24,24,24,30,0,1);   // ]
        do Output.create(94,8,28,54,0,0,0,0,0,0,0,1);          // ^
        do Output.create(95,0,0,0,0,0,0,0,0,0,63,1);           // _
        do Output.create(96,6,12,24,0,0,0,0,0,0,0,1);          // `

        do Output.create(97,0,0,0,30,33,33,33,126,0,0,0);      // a
        do Output.create(98,1,1,1,31,33,33,33,31,0,0,0);       // b
        do Output.create(99,0,0,0,62,1,1,1,62,0,0,0);          // c
        do Output.create(100,32,32,32,62,33,33,33,62,0,0,0);   // d
        do Output.create(101,0,0,0,30,33,63,1,62,0,0,0);       // e
        do Output.create(102,30,33,1,1,7,1,1,1,0,0,0);         // f
        do Output.create(103,0,0,0,30,33,33,33,62,32,30,0);    // g
        do Output.create(104,1,1,1,1,31,33,33,33,0,0,0);       // h
        do Output.create(105,0,4,0,4,4,4,4,14,0,0,0);          // i
        do Output.create(106,0,8,0,8,8,8,8,8,8,14,0);          // j
        do Output.create(107,2,2,2,18,10,6,10,18,0,0,0);       // k
        do Output.create(108,4,4,4,4,4,4,4,12,0,0,0);          // l
        do Output.create(109,0,0,0,22,41,41,41,41,0,0,0);      // m
        do Output.create(110,0,0,0,30,33,33,33,33,0,0,0);      // n
        do Output.create(111,0,0,0,30,33,33,33,30,0,0,0);      // o
        do Output.create(112,0,0,0,30,33,33,33,31,1,1,0);      // p
        do Output.create(113,0,0,0,30,33,33,33,62,32,96,0);    // q
        do Output.create(114,0,0,0,28,34,2,2,2,0,0,0);         // r
        do Output.create(115,0,0,0,30,35,12,49,30,0,0,0);      // s
        do Output.create(116,4,4,4,28,4,4,4,24,0,0,0);         // t
        do Output.create(117,0,0,0,33,33,33,33,62,0,0,0);      // u
        do Output.create(118,0,0,0,33,33,33,18,12,0,0,0);      // v
        do Output.create(119,0,0,0,33,33,45,45,18,0,0,0);      // w
        do Output.create(120,0,0,0,33,18,12,18,33,0,0,0);      // x
        do Output.create(121,0,0,0,33,33,33,33,62,32,30,0);    // y
        do Output.create(122,0,0,0,63,32,30,1,63,0,0,0);       // z
        
        do Output.create(123,56,12,12,12,7,12,12,12,56,0,1);   // {
        do Output.create(124,12,12,12,12,12,12,12,12,12,0,1);  // |
        do Output.create(125,7,12,12,12,56,12,12,12,7,0,1);    // }
        do Output.create(126,0,0,0,0,70,93,49,0,0,0,0);        // ~

        return;
    }

    // Creates a character map array of the given char index with the given values.
    function void create(
        int index,
        int a,
        int b,
        int c,
        int d,
        int e,
		int f,
        int g,
        int h,
        int i,
        int j,
        int k)
    {
        var Array map;

        let map = Array.new(11);
        let charMaps[index] = map;

        let map[0] = a;
        let map[1] = b;
        let map[2] = c;
        let map[3] = d;
        let map[4] = e;
        let map[5] = f;
        let map[6] = g;
        let map[7] = h;
        let map[8] = i;
        let map[9] = j;
        let map[10] = k;

        return;
    }
    
    // Returns the character map (array of size 11) for the given character
    // If an invalid character is given, returns the character map of a black square.
    function Array getMap(char c)
    {
        
        if ((c < 32) | (c > 126))
        {
            let c = 0;
        }
        
        return charMaps[c];
    }

    /** Moves the cursor to the j�th column of the i�th row,
     *  and erases the character that was there. */
    function void moveCursor(int i, int j)
    {
        let charX = j;
        let charY = i;
        do Output.privateStabiliseChar();
        do Output.privatePrintChar(0);
        
        return;
    }

    /** Prints c at the cursor location and advances the cursor one
     *  column forward. */
    function void printChar(char c)
    {
        var int newCharX;
        var int newCharY;
            
        do Output.privatePrintChar(c);
        
        let charX = charX + 1;
        do Output.privateStabiliseChar();
        
        return;
    }
    
    /** Prints s starting at the cursor location, and advances the
     *  cursor appropriately. */
    function void printString(String s)
    {
        var int charIndex;
        
        let charIndex = 0;
        while(charIndex < String.length(s))
        {
            do Output.printChar(s.charAt(charIndex));
            let charIndex = charIndex + 1;
        }
        
        return;
    }

    /** Prints i starting at the cursor location, and advances the
     *  cursor appropriately. */
    function void printInt(int i)
    {
        var String tempString;
        
        let tempString = String.new(6);
        do tempString.setInt(i);
        do Output.printString(tempString);
        
        do tempString.dispose();
        
        return;
    }

    /** Advances the cursor to the beginning of the next line. */
    function void println()
    {
        do Output.moveCursor(charY + 1, 0);
        return;
    }

    /** Moves the cursor one column back. */
    function void backSpace()
    {
        do Output.moveCursor(charY, charX-1);
        return;
    }
    
    function void privateStabiliseChar()
    {
        if(charX < 0)
        {
            let charX = 0; 
        }
        
        if(charY < 0)
        {
            let charY = 0;
        }
            
        if(charX > 63)
        {
            let charX = 0;
            let charY = charY + 1;
            
            if(charY > 22)
            {
                let charY = 0;
            }
        }
        
        return;
    }
    
    function void privatePrintChar(char c)
    {
        var Array map;
        var int rowCode;
        var Array rowMap;
        var int localPixelX;
        var int localPixelY;
        var int pixelX;
        var int pixelY;
        var int pixelXMin;
        var int pixelYMin;
        
        let map = charMaps[c];
        
        let pixelXMin = charX * 8;
        let pixelYMin = charY * 11;
                       
        let localPixelY = 0;
        while(localPixelY < 11)
        {
            let pixelY = localPixelY + pixelYMin;
            let rowCode = map[localPixelY];
            let rowMap = Output.privateMapFromCode(rowCode);
            
            let localPixelX = 0;
            while(localPixelX < 8)
            {
                let pixelX = localPixelX + pixelXMin;
                
                do Screen.setColor(rowMap[localPixelX]);
                do Screen.drawPixel(pixelX, pixelY);
                let localPixelX = localPixelX + 1;
            }
            
            let localPixelY = localPixelY + 1;
            
            do rowMap.dispose();
        }
        
        return;
    }
    
    function Array privateMapFromCode(int code)
    {
        var Array result;
        var int i;
        var int power;
        var int hasPixel;
        
        let result = Array.new(8);
        let i = 7;
        while(i > -1)
        {
            let power = twoToThe[i];
            let hasPixel = ~(code < power);
            let result[i] = hasPixel;
            if(hasPixel)
            {
                let code = code - power;
            }
                
            let i = i - 1;
        }
        
        return result;
    }
}
